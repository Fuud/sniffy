name: Check Pull Request

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - master
      - release/*
      - hotfix/*
  pull_request:
    branches-ignore:
      - tag/*
jobs:
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [ 8, 9, 10, 11, 12, 13, 14, 15, 16-ea, 17-ea]
        os: [ubuntu-20.04, windows-2019, macos-10.15]
    name:  Test JDK ${{ matrix.java }}, ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v3
      with:
        gpg-private-key: ${{ secrets.SIGNING_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
    - name: GPG user IDs
      run: |
        echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
        echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
        echo "name:        ${{ steps.import_gpg.outputs.name }}"
        echo "email:       ${{ steps.import_gpg.outputs.email }}"
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '.github/workflows/pr.yml') }}
        restore-keys: ${{ runner.os }}-maven
    - name: Build with Maven
      run: mvn -B verify --file pom.xml -U -P ci -Dmaven.wagon.http.retryHandler.count=3
      if: matrix.os != 'windows-2019'
    - name: Build with Maven
      run: mvn -B verify --file pom.xml -U -P ci '-Dmaven.wagon.http.retryHandler.count=3'
      if: matrix.os == 'windows-2019'
    - name: Set up JDK ${{ matrix.java }} x86
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
        architecture: x86
      if: matrix.os != 'macos-10.15'
    - name: Build with Maven x86
      run: mvn -B verify --file pom.xml -U -P ci -Dmaven.wagon.http.retryHandler.count=3
      if: matrix.os == 'ubuntu-20.04'
    - name: Build with Maven x86
      run: mvn -B verify --file pom.xml -U -P ci '-Dmaven.wagon.http.retryHandler.count=3'
      if: matrix.os == 'windows-2019'
    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  compatibility-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]
    name: Legacy JDK, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '.github/workflows/pr.yml') }}
          restore-keys: ${{ runner.os }}-maven
      - name: Build with Maven
        run: mvn -B clean install --file pom.xml -U -P ci -Dgpg.skip=true -Dmaven.wagon.http.retryHandler.count=3
        if: matrix.os != 'windows-2019'
      - name: Build with Maven
        run: mvn -B clean install --file pom.xml -U -P ci '-Dgpg.skip=true' '-Dmaven.wagon.http.retryHandler.count=3'
        if: matrix.os == 'windows-2019'
      - name: Run compatibility tests using Java 8
        run: mvn -f sniffy-compatibility-tests/pom.xml test
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Run compatibility tests using Java 11
        run: mvn -f sniffy-compatibility-tests/pom.xml test
      - name: Set up JDK 7
        uses: actions/setup-java@v1
        with:
          java-version: 7
      - name: Set up Maven 3.2.5
        run: mkdir -p /tmp && cd /tmp && curl https://archive.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz -o apache-maven-3.2.5-bin.tar.gz && tar -xzvf apache-maven-3.2.5-bin.tar.gz && export M2_HOME=/tmp/apache-maven-3.2.5 && export MAVEN_HOME=/tmp/apache-maven-3.2.5 && export PATH=${M2_HOME}/bin:${PATH}
        shell: bash
      - name: Run compatibility tests using Maven 3.2.5 and Java 7
        run: export MAVEN_SKIP_RC=true && export M2_HOME=/tmp/apache-maven-3.2.5 && /tmp/apache-maven-3.2.5/bin/mvn -f sniffy-compatibility-tests/pom.xml clean verify
        shell: bash
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      # No Java 6 on MacOS
      - name: Set up JDK 6
        uses: actions/setup-java@v1
        with:
          java-version: 6
        if: matrix.os != 'macOS-10.15'
      # No Java 6 on MacOS
      - name: Run compatibility tests using Maven 3.2.5 and Java 6
        run: export MAVEN_SKIP_RC=true && export M2_HOME=/tmp/apache-maven-3.2.5 && /tmp/apache-maven-3.2.5/bin/mvn -f sniffy-compatibility-tests/pom.xml clean verify
        shell: bash
        if: matrix.os != 'macOS-10.15'
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.os != 'macOS-10.15'
  analyze:
    name: Analyze
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more...
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      #- name: Autobuild
      #  uses: github/codeql-action/autobuild@v1
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '.github/workflows/pr.yml') }}
          restore-keys: ${{ runner.os }}-maven
      - name: Build with Maven
        run: mvn -B clean install --file pom.xml -U -P ci -Dgpg.skip=true -Dmaven.wagon.http.retryHandler.count=3

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö https://git.io/JvXDl

      # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1