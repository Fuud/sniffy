name: Check Pull Request

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - release/*
      - hotfix/*
  pull_request:
    branches-ignore:
      - tag/*
      -
jobs:
#  test-coverage:
#    runs-on: ubuntu-latest
#    name: Coverage JDK 8, Linux
#    steps:
#      - uses: actions/checkout@v2
#      - name: Import GPG key
#        id: import_gpg
#        uses: crazy-max/ghaction-import-gpg@v3
#        with:
#          gpg-private-key: ${{ secrets.SIGNING_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
#      - name: GPG user IDs
#        run: |
#          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
#          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
#          echo "name:        ${{ steps.import_gpg.outputs.name }}"
#          echo "email:       ${{ steps.import_gpg.outputs.email }}"
#      - name: Set up JDK 8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 8
#      - name: Build with Maven
#        run: mvn -B clean verify jacoco:report --file pom.xml -U -P ci
#      - uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#  test-matrix:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        java: [ 8, 9, 10, 11, 12, 13, 14, 15, 16-ea]
#        os: [ubuntu-18.04, windows-2019, macos-10.15]
#    name:  Test JDK ${{ matrix.java }}, ${{ matrix.os }}
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up JDK ${{ matrix.java }}
#      uses: actions/setup-java@v1
#      with:
#        java-version: ${{ matrix.java }}
#    - name: Cache Maven packages
#      uses: actions/cache@v2
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '.github/workflows/pr.yml') }}
#        restore-keys: ${{ runner.os }}-maven
#    - name: Build with Maven
#      run: mvn -B clean package --file pom.xml -U -P ci
  compatibility-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        exclude:
          # excludes node 4 on macOS
          - os: macos-latest
            node: 4
    name: Compatibility JDK 6 and JDK 7, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Build with Maven
        run: mvn -B clean install --file pom.xml -U -P ci -DskipTests=true '-Dgpg.skip=true'
      - name: Run compatibility tests using Java 8
        run: mvn -f sniffy-compatibility-tests/pom.xml test
      - name: Set up JDK 7
        uses: actions/setup-java@v1
        with:
          java-version: 7
      - name: Set up Maven 3.2.5
        run: mkdir -p /tmp && cd /tmp && curl https://archive.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz -o apache-maven-3.2.5-bin.tar.gz && tar -xzvf apache-maven-3.2.5-bin.tar.gz && export M2_HOME=/tmp/apache-maven-3.2.5 && export MAVEN_HOME=/tmp/apache-maven-3.2.5 && export PATH=${M2_HOME}/bin:${PATH}
        shell: bash
      - name: Run compatibility tests using Maven 3.2.5 and Java 7
        run: export MAVEN_SKIP_RC=true && export M2_HOME=/tmp/apache-maven-3.2.5 && /tmp/apache-maven-3.2.5/bin/mvn -f sniffy-compatibility-tests/pom.xml test
        shell: bash
      - name: Set up JDK 6
        uses: actions/setup-java@v1
        with:
          java-version: 6
        if: matrix.os != 'macOS-10.14'
      - name: Run compatibility tests using Maven 3.2.5 and Java 6
        run: export MAVEN_SKIP_RC=true && export M2_HOME=/tmp/apache-maven-3.2.5 && /tmp/apache-maven-3.2.5/bin/mvn -f sniffy-compatibility-tests/pom.xml test
        shell: bash
        if: matrix.os != 'macOS-10.14'