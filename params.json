{"name":"Jdbc-sniffer","tagline":"JDBC Sniffer","body":"JDBC Sniffer\r\n============\r\n\r\nJDBC Sniffer counts the number of executed SQL queries and provides an API for validating it and reseting to 0\r\nIt is very useful in unit tests and allows you to test if particular method doesn't make more than N SQL queries\r\n\r\nDownload\r\n============\r\n[jdbc-sniffer-1.0.jar](https://github.com/bedrin/jdbc-sniffer/raw/1.0/jdbc-sniffer-1.0.jar)\r\n\r\nSetup\r\n============\r\nSimply add jdbc-sniffer.jar to your classpath and add \"sniffer:\" prefix to the JDBC connection url\r\nFor example \"jdbc:h2:~/test\" should be changed to \"sniffer:jdbc:h2:~/test\"\r\n\r\nValidating the number of queries\r\n============\r\nThe number of executed queries is available via static methods of two classes:\r\ncom.github.bedrin.jdbc.sniffer.Sniffer and com.github.bedrin.jdbc.sniffer.ThreadLocalSniffer\r\n\r\nFirst one holds the number of SQL queries executed by all threads, while the later holds the number of SQL queries generated by current thread only\r\n\r\n```java\r\n@Test\r\npublic void testExecuteStatement() throws ClassNotFoundException, SQLException {\r\n    // Just add sniffer: in front of your JDBC connection URL in order to enable sniffer\r\n    Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:~/test\", \"sa\", \"sa\");\r\n    connection.createStatement().execute(\"SELECT 1 FROM DUAL\");\r\n    // Sniffer.executedStatements() returns count of execute queries\r\n    assertEquals(1, Sniffer.executedStatements());\r\n    // Sniffer.verifyNotMoreThanOne() throws an IllegalStateException if more than one query was executed; it also resets the counter to 0\r\n    Sniffer.verifyNotMoreThanOne();\r\n    // Sniffer.verifyNotMore() throws an IllegalStateException if any query was executed\r\n    Sniffer.verifyNotMore();\r\n}\r\n```\r\n","google":"UA-57642104-1","note":"Don't delete this file! It's used internally to help with page regeneration."}