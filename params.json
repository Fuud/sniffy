{"name":"Jdbc-sniffer","tagline":"JDBC Sniffer","body":"JDBC Sniffer\r\n============\r\n\r\n[![Join the chat at https://gitter.im/bedrin/jdbc-sniffer](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/bedrin/jdbc-sniffer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![CI Status](https://travis-ci.org/bedrin/jdbc-sniffer.svg?branch=master)](https://travis-ci.org/bedrin/jdbc-sniffer)\r\n[![Coverage Status](https://coveralls.io/repos/bedrin/jdbc-sniffer/badge.png?branch=master)](https://coveralls.io/r/bedrin/jdbc-sniffer?branch=master)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.bedrin/jdbc-sniffer/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.github.bedrin/jdbc-sniffer)\r\n[![Download](https://api.bintray.com/packages/bedrin/github/jdbc-sniffer/images/download.svg) ](https://bintray.com/bedrin/github/jdbc-sniffer/_latestVersion)\r\n\r\nJDBC Sniffer counts the number of executed SQL queries and provides an API for validating them\r\nIt is designed for unit tests and allows you to test if particular method doesn't make more than N SQL queries\r\nEspecially it's useful to catch the ORM [N+1 problem](http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue) at easrly stages \r\n\r\n```java\r\ntry (Spy s = Sniffer.expectAtMostOnce().expectNever(Threads.OTHERS);\r\n     Statement statement = connection.createStatement()) {\r\n    statement.execute(\"SELECT 1 FROM DUAL\");\r\n    // JDBC Sniffer will throw an Exception if you uncomment line below\r\n    //statement.execute(\"SELECT 1 FROM DUAL\");\r\n}\r\n```\r\n\r\nMaven\r\n============\r\nJDBC Sniffer is available from Maven Central repository\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.bedrin</groupId>\r\n    <artifactId>jdbc-sniffer</artifactId>\r\n    <version>2.2</version>\r\n</dependency>\r\n```\r\n\r\nFor Gradle users:\r\n```javascript\r\ndependencies {\r\n    compile 'com.github.bedrin:jdbc-sniffer:2.2'\r\n}\r\n```\r\n\r\nDownload\r\n============\r\n[![Get automatic notifications about new \"jdbc-sniffer\" versions](https://www.bintray.com/docs/images/bintray_badge_color.png) ](https://bintray.com/bedrin/github/jdbc-sniffer/view?source=watch)\r\n- [jdbc-sniffer-2.2.jar](https://github.com/bedrin/jdbc-sniffer/releases/download/2.2/jdbc-sniffer-2.2.jar) ([bintray mirror](https://bintray.com/artifact/download/bedrin/github/jdbc-sniffer-2.2.jar))\r\n- [jdbc-sniffer-2.2-sources.jar](https://github.com/bedrin/jdbc-sniffer/releases/download/2.2/jdbc-sniffer-2.2-sources.jar) ([bintray mirror](https://bintray.com/artifact/download/bedrin/github/jdbc-sniffer-2.2-sources.jar))\r\n- [jdbc-sniffer-2.2-javadoc.jar](https://github.com/bedrin/jdbc-sniffer/releases/download/2.2/jdbc-sniffer-2.2-javadoc.jar) ([bintray mirror](https://bintray.com/artifact/download/bedrin/github/jdbc-sniffer-2.2-javadoc.jar))\r\n\r\nSetup\r\n============\r\nSimply add jdbc-sniffer.jar to your classpath and add `sniffer:` prefix to the JDBC connection url\r\nFor example `jdbc:h2:~/test` should be changed to `sniffer:jdbc:h2:mem:`\r\nThe sniffer JDBC driver class name is `com.github.bedrin.jdbc.sniffer.MockDriver`\r\n\r\nUsage\r\n============\r\nFollowing test shows the main ways of integrating JDBC Sniffer into your project:\r\n\r\n```java\r\nimport com.github.bedrin.jdbc.sniffer.Sniffer;\r\nimport com.github.bedrin.jdbc.sniffer.Spy;\r\nimport com.github.bedrin.jdbc.sniffer.Threads;\r\nimport com.github.bedrin.jdbc.sniffer.Expectation;\r\nimport com.github.bedrin.jdbc.sniffer.junit.QueryCounter;\r\nimport org.junit.Rule;\r\nimport org.junit.Test;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class UsageTest {\r\n\r\n    @Test\r\n    public void testVerifyApi() throws SQLException {\r\n        // Just add sniffer: in front of your JDBC connection URL in order to enable sniffer\r\n        Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:mem:\", \"sa\", \"sa\");\r\n        // Spy holds the amount of queries executed till the given amount of time\r\n        // It acts as a base for further assertions\r\n        Spy spy = Sniffer.spy();\r\n        // You do not need to modify your JDBC code\r\n        connection.createStatement().execute(\"SELECT 1 FROM DUAL\");\r\n        assertEquals(1, spy.executedStatements());\r\n        // Sniffer.verifyAtMostOnce() throws an AssertionError if more than one query was executed;\r\n        spy.verifyAtMostOnce();\r\n        // Sniffer.verifyNever(Threads.OTHERS) throws an AssertionError if at least one query was executed\r\n        // by the thread other than then current one\r\n        spy.verifyNever(Threads.OTHERS);\r\n    }\r\n\r\n    @Test\r\n    public void testFunctionalApi() throws SQLException {\r\n        // Just add sniffer: in front of your JDBC connection URL in order to enable sniffer\r\n        final Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:mem:\", \"sa\", \"sa\");\r\n        // Sniffer.execute() method executes the lambda expression and returns an instance of Spy\r\n        // which provides methods for validating the number of executed queries in given lambda\r\n        Sniffer.execute(() -> connection.createStatement().execute(\"SELECT 1 FROM DUAL\")).verifyAtMostOnce();\r\n    }\r\n\r\n    @Test\r\n    public void testResourceApi() throws SQLException {\r\n        // Just add sniffer: in front of your JDBC connection URL in order to enable sniffer\r\n        final Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:mem:\", \"sa\", \"sa\");\r\n        // You can use Sniffer in a try-with-resource block using expect methods instead of verify\r\n        // When the try-with-resource block is completed, JDBC Sniffer will verify all the expectations defined\r\n        try (@SuppressWarnings(\"unused\") Spy s = Sniffer.expectAtMostOnce().expectNever(Threads.OTHERS);\r\n             Statement statement = connection.createStatement()) {\r\n            statement.execute(\"SELECT 1 FROM DUAL\");\r\n        }\r\n    }\r\n\r\n    // Integrate JDBC Sniffer to your test using @Rule annotation and a QueryCounter field\r\n    @Rule\r\n    public final QueryCounter queryCounter = new QueryCounter();\r\n\r\n    // Now just add @Expectation or @Expectations annotations to define number of queries allowed for given method\r\n    @Test\r\n    @Expectation(1)\r\n    public void testJUnitIntegration() throws SQLException {\r\n        // Just add sniffer: in front of your JDBC connection URL in order to enable sniffer\r\n        final Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:mem:\", \"sa\", \"sa\");\r\n        // Do not make any changes in your code - just add the @Rule QueryCounter and put annotations on your test method\r\n        connection.createStatement().execute(\"SELECT 1 FROM DUAL\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nIntegrating with test frameworks\r\n============\r\nJDBC Sniffer provides integration with popular testing frameworks - see our wiki for details\r\n \r\n * [JUnit](https://github.com/bedrin/jdbc-sniffer/wiki/JUnit)\r\n * [Spring Framework](https://github.com/bedrin/jdbc-sniffer/wiki/Spring-Framework)\r\n * [Spock Framework](https://github.com/bedrin/jdbc-sniffer/wiki/Spock-Framework)\r\n * [Test NG](https://github.com/bedrin/jdbc-sniffer/wiki/Test-NG)\r\n\r\nBuilding\r\n============\r\nJDBC sniffer is built using JDK8+ and Maven 3.2+ - just checkout the project and type `mvn install`\r\nJDK8 is required only for building the project - once it's built, you can use JDBC Sniffer with any JRE 1.5+\r\n\r\nContribute\r\n============\r\nYou are most welcome to contribute to JDBC Sniffer!\r\n\r\nRead the [Contribution guidelines](https://github.com/bedrin/jdbc-sniffer/blob/master/CONTRIBUTING.md)\r\n","google":"UA-57642104-1","note":"Don't delete this file! It's used internally to help with page regeneration."}