{"name":"Jdbc-sniffer","tagline":"JDBC Sniffer","body":"JDBC Sniffer\r\n============\r\n[![CI Status](https://travis-ci.org/bedrin/jdbc-sniffer.svg?branch=develop)](https://travis-ci.org/bedrin/jdbc-sniffer)\r\n[![Coverage Status](https://coveralls.io/repos/bedrin/jdbc-sniffer/badge.png?branch=master)](https://coveralls.io/r/bedrin/jdbc-sniffer?branch=master)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.bedrin/jdbc-sniffer/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.github.bedrin/jdbc-sniffer)\r\n\r\nJDBC Sniffer counts the number of executed SQL queries and provides an API for validating it\r\nIt is very useful in unit tests and allows you to test if particular method doesn't make more than N SQL queries\r\n\r\nMaven\r\n============\r\nJDBC Sniffer is available from Maven Central repository\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.bedrin</groupId>\r\n    <artifactId>jdbc-sniffer</artifactId>\r\n    <version>1.4</version>\r\n</dependency>\r\n```\r\n\r\nFor Gradle users:\r\n```javascript\r\ndependencies {\r\n    compile 'com.github.bedrin:jdbc-sniffer:1.4'\r\n}\r\n```\r\n\r\nDownload\r\n============\r\n- [jdbc-sniffer-1.4.jar](https://github.com/bedrin/jdbc-sniffer/releases/download/1.4/jdbc-sniffer-1.1.jar)\r\n- [jdbc-sniffer-1.4-sources.jar](https://github.com/bedrin/jdbc-sniffer/releases/download/1.4/jdbc-sniffer-1.1-sources.jar)\r\n- [jdbc-sniffer-1.4-javadoc.jar](https://github.com/bedrin/jdbc-sniffer/releases/download/1.4/jdbc-sniffer-1.1-javadoc.jar)\r\n\r\nSetup\r\n============\r\nSimply add jdbc-sniffer.jar to your classpath and add `sniffer:` prefix to the JDBC connection url\r\nFor example `jdbc:h2:~/test` should be changed to `sniffer:jdbc:h2:~/test`\r\nThe sniffer JDBC driver class name is `com.github.bedrin.jdbc.sniffer.MockDriver`\r\n\r\nJUnit Integration\r\n============\r\nJDBC Sniffer supports integration with JUnit framework via `@Rule`\r\n\r\nAdd a `QueryCounter` rule to your test and assert the maximum number of queries allowed for particular test using `@AllowedQueries(n)` and `@NotAllowedQueries` annotations\r\n\r\n```java\r\npackage com.github.bedrin.jdbc.sniffer.junit;\r\n\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Rule;\r\nimport org.junit.Test;\r\nimport org.junit.rules.ExpectedException;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\n\r\npublic class QueryCounterTest {\r\n\r\n    @Rule\r\n    public ExpectedException thrown = ExpectedException.none();\r\n\r\n    @Rule\r\n    public QueryCounter queryCounter = new QueryCounter();\r\n\r\n    @BeforeClass\r\n    public static void loadDriver() throws ClassNotFoundException {\r\n        Class.forName(\"com.github.bedrin.jdbc.sniffer.MockDriver\");\r\n    }\r\n\r\n    @Test\r\n    @AllowedQueries(1)\r\n    public void testAllowedOneQuery() throws SQLException {\r\n        Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:~/test\", \"sa\", \"sa\");\r\n        connection.createStatement().execute(\"SELECT 1 FROM DUAL\");\r\n    }\r\n\r\n    @Test\r\n    @NotAllowedQueries\r\n    public void testNotAllowedQueries() throws SQLException {\r\n        Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:~/test\", \"sa\", \"sa\");\r\n        connection.createStatement().execute(\"SELECT 1 FROM DUAL\");\r\n        thrown.expect(AssertionError.class);\r\n    }\r\n\r\n}\r\n```\r\n\r\nSniffer API\r\n============\r\nThe number of executed queries is available via static methods of several classes:\r\n`com.github.bedrin.jdbc.sniffer.Sniffer`, `com.github.bedrin.jdbc.sniffer.ThreadLocalSniffer` and `com.github.bedrin.jdbc.sniffer.OtherThreadsSniffer`\r\n\r\nFirst one holds the number of SQL queries executed by all threads, second one holds the number of SQL queries generated by current thread only, and the last one counts SQL queries executed by all threads except for the current one\r\n\r\n```java\r\n@Test\r\npublic void testExecuteStatement() throws ClassNotFoundException, SQLException {\r\n    // Just add sniffer: in front of your JDBC connection URL in order to enable sniffer\r\n    Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:~/test\", \"sa\", \"sa\");\r\n    // Sniffer.reset() sets the internal counter of queries to zero\r\n    Sniffer.reset();\r\n    // You do not need to modify your JDBC code\r\n    connection.createStatement().execute(\"SELECT 1 FROM DUAL\");\r\n    // Sniffer.executedStatements() returns count of execute queries\r\n    assertEquals(1, Sniffer.executedStatements());\r\n    // Sniffer.verifyNotMoreThanOne() throws an AssertionError if more than one query was executed;\r\n    // it also resets the counter to 0\r\n    Sniffer.verifyNotMoreThanOne();\r\n    // Sniffer.verifyNotMore() throws an AssertionError if any query was executed\r\n    Sniffer.verifyNotMore();\r\n}\r\n```\r\n\r\nIf you want to count the number of queries generated by a particular block of code, JDBC Sniffer provides a convenient functional API:\r\n```java\r\n@Test\r\npublic void testFunctionalApi() throws SQLException {\r\n    final Connection connection = DriverManager.getConnection(\"sniffer:jdbc:h2:~/test\", \"sa\", \"sa\");\r\n    // Sniffer.execute() method executes the lambda expression and returns an instance of RecordedQueries\r\n    // this class provides methods for validating the number of executed queries\r\n    Sniffer.execute(() -> connection.createStatement().execute(\"SELECT 1 FROM DUAL\")).verifyNotMoreThanOne();\r\n}\r\n```\r\n\r\n\r\nBuilding\r\n============\r\nJDBC sniffer is built using JDK8+ and Maven 3+ - just checkout the project and type `mvn install`\r\nJDK8 is required only for building the project - once it's built, you can use JBC sniffer with JRE 1.6+","google":"UA-57642104-1","note":"Don't delete this file! It's used internally to help with page regeneration."}